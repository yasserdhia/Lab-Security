(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[902],{9485:function(e,s,t){Promise.resolve().then(t.bind(t,994))},994:function(e,s,t){"use strict";t.r(s),t.d(s,{default:function(){return a}});var n=t(7437),r=t(229);function a(){let e=async e=>{try{let s=await fetch("/api/level1",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await s.json()}catch(e){return{success:!1,error:"Failed to connect to server"}}};return(0,n.jsx)("div",{className:"min-h-screen bg-gradient-to-br from-cyber-dark via-gray-900 to-cyber-dark py-12",children:(0,n.jsxs)("div",{className:"container mx-auto px-6",children:[(0,n.jsx)(r.Z,{level:1,title:"Basic String Injection",description:"This level demonstrates the most fundamental type of SQL injection vulnerability. The application concatenates user input directly into SQL queries without any sanitization or parameterization.",onSubmit:e,hints:["This level uses basic string concatenation for SQL queries","Try using single quotes (') to break out of the string context","The classic payload ' OR '1'='1' -- should work here","Look for SQL error messages that might reveal database structure","The comment sequence -- will comment out the rest of the query"],isVulnerable:!0}),(0,n.jsx)("div",{className:"mt-12 max-w-4xl mx-auto",children:(0,n.jsxs)("div",{className:"vulnerability-card rounded-lg p-8",children:[(0,n.jsx)("h2",{className:"text-2xl font-semibold mb-6 text-cyber-blue",children:"\uD83D\uDD0D Technical Details"}),(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsxs)("div",{children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Vulnerable Code Example:"}),(0,n.jsx)("div",{className:"code-block",children:"// Vulnerable SQL query construction\nconst query = \"SELECT * FROM users WHERE username = '\" + username + \"' AND password = '\" + password + \"'\";\n\n// When user inputs: admin' OR '1'='1' --\n// The query becomes:\n// SELECT * FROM users WHERE username = 'admin' OR '1'='1' --' AND password = 'anything'"})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Why This Works:"}),(0,n.jsxs)("ul",{className:"space-y-2 text-gray-300",children:[(0,n.jsxs)("li",{className:"flex items-start",children:[(0,n.jsx)("span",{className:"text-cyber-blue mr-2",children:"•"}),"The single quote breaks out of the string context"]}),(0,n.jsxs)("li",{className:"flex items-start",children:[(0,n.jsx)("span",{className:"text-cyber-blue mr-2",children:"•"}),"OR '1'='1' creates a condition that's always true"]}),(0,n.jsxs)("li",{className:"flex items-start",children:[(0,n.jsx)("span",{className:"text-cyber-blue mr-2",children:"•"}),"The -- comments out the rest of the query, ignoring the password check"]}),(0,n.jsxs)("li",{className:"flex items-start",children:[(0,n.jsx)("span",{className:"text-cyber-blue mr-2",children:"•"}),"This bypasses authentication entirely"]})]})]}),(0,n.jsxs)("div",{children:[(0,n.jsx)("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Prevention Methods:"}),(0,n.jsx)("div",{className:"code-block",children:'// Use parameterized queries instead\nconst query = "SELECT * FROM users WHERE username = $1 AND password = $2";\nconst result = await pool.query(query, [username, hashedPassword]);\n\n// Or use an ORM with built-in protection\nconst user = await User.findOne({\n  where: {\n    username: username,\n    password: hashedPassword\n  }\n});'})]})]})]})})]})})}}},function(e){e.O(0,[229,971,117,744],function(){return e(e.s=9485)}),_N_E=e.O()}]);