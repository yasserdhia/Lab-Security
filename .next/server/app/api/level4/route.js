"use strict";(()=>{var e={};e.id=982,e.ids=[982],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8678:e=>{e.exports=import("pg")},3182:(e,t,s)=>{s.a(e,async(e,o)=>{try{s.r(t),s.d(t,{originalPathname:()=>y,patchFetch:()=>l,requestAsyncStorage:()=>p,routeModule:()=>u,serverHooks:()=>g,staticGenerationAsyncStorage:()=>d});var r=s(9303),n=s(8716),a=s(670),i=s(129),c=e([i]);i=(c.then?(await c)():c)[0];let u=new r.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/level4/route",pathname:"/api/level4",filename:"route",bundlePath:"app/api/level4/route"},resolvedPagePath:"c:\\Users\\YASSER\\Documents\\GitHub\\Lab-Security\\src\\app\\api\\level4\\route.ts",nextConfigOutput:"",userland:i}),{requestAsyncStorage:p,staticGenerationAsyncStorage:d,serverHooks:g}=u,y="/api/level4/route";function l(){return(0,a.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:d})}o()}catch(e){o(e)}})},129:(e,t,s)=>{s.a(e,async(e,o)=>{try{s.r(t),s.d(t,{POST:()=>i});var r=s(7070),n=s(5748),a=e([n]);async function i(e){try{let{username:t,password:s}=await e.json();if(!t||!s)return r.NextResponse.json({success:!1,message:"Invalid credentials provided"},{status:400});let o=`SELECT COUNT(*) FROM users WHERE username = '${t}' AND password = '${s}'`;console.log("Executing query:",o);try{await n.Z.query("SELECT 1"),console.log("Database connection test successful");let e=await n.Z.query(o);if(console.log("Query result:",e.rows),parseInt(e.rows[0].count)>0)return r.NextResponse.json({success:!0,message:"Login successful",response_pattern:"TRUE_CONDITION",debug_info:{note:"In blind injection, you only get this type of response pattern",query:o,technique:"Boolean-based blind SQL injection",hint:"Look for consistent differences between true and false conditions"}});return r.NextResponse.json({success:!1,message:"Login failed",response_pattern:"FALSE_CONDITION",debug_info:{note:"This is the false condition response pattern",query:o,hint:"Try payloads that make the WHERE clause always true"}})}catch(e){return console.error("Database error:",e),r.NextResponse.json({success:!1,message:"System error occurred",response_pattern:"ERROR_CONDITION",debug_info:{note:"SQL errors often indicate injection points",hint:"Syntax errors suggest the injection point is working",error_type:"SQL_SYNTAX_ERROR"}},{status:500})}}catch(e){return console.error("Server error:",e),r.NextResponse.json({success:!1,message:"System temporarily unavailable"},{status:500})}}n=(a.then?(await a)():a)[0],o()}catch(e){o(e)}})},5748:(e,t,s)=>{s.a(e,async(e,o)=>{try{s.d(t,{Z:()=>i});var r=s(8678),n=e([r]);r=(n.then?(await n)():n)[0],console.log("Database URL:","postgresql://postgres:password@localhost:5432/sqli_lab");let a=new r.Pool({host:"db",port:5432,database:"sqli_lab",user:"postgres",password:"password",ssl:!1,max:20,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3});a.on("connect",()=>{console.log("Connected to PostgreSQL database")}),a.on("error",e=>{console.error("Unexpected error on idle client",e)});let i=a;o()}catch(e){o(e)}})}};var t=require("../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),o=t.X(0,[276,972],()=>s(3182));module.exports=o})();