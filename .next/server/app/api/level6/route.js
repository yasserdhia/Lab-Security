"use strict";(()=>{var e={};e.id=715,e.ids=[715],e.modules={399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},8678:e=>{e.exports=import("pg")},6992:(e,r,t)=>{t.a(e,async(e,s)=>{try{t.r(r),t.d(r,{originalPathname:()=>m,patchFetch:()=>d,requestAsyncStorage:()=>u,routeModule:()=>l,serverHooks:()=>g,staticGenerationAsyncStorage:()=>p});var o=t(9303),a=t(8716),n=t(670),i=t(8280),c=e([i]);i=(c.then?(await c)():c)[0];let l=new o.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/level6/route",pathname:"/api/level6",filename:"route",bundlePath:"app/api/level6/route"},resolvedPagePath:"c:\\Users\\YASSER\\Documents\\GitHub\\Lab-Security\\src\\app\\api\\level6\\route.ts",nextConfigOutput:"",userland:i}),{requestAsyncStorage:u,staticGenerationAsyncStorage:p,serverHooks:g}=l,m="/api/level6/route";function d(){return(0,n.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:p})}s()}catch(e){s(e)}})},8280:(e,r,t)=>{t.a(e,async(e,s)=>{try{t.r(r),t.d(r,{POST:()=>i});var o=t(7070),a=t(5748),n=e([a]);async function i(e){try{let{username:r,password:t}=await e.json();if(!r||!t)return o.NextResponse.json({success:!1,error:"Username and password are required"},{status:400});try{await a.Z.query("SELECT 1"),console.log("Database connection test successful");let e=`INSERT INTO logs (user_id, action, details) VALUES (1, 'login_attempt', '{"username": "${r}", "password": "${t}"}')`;await a.Z.query(e);let s=`SELECT details FROM logs WHERE action = 'login_attempt' AND details::text LIKE '%${r}%' ORDER BY timestamp DESC LIMIT 1`;console.log("Second-order query:",s);let n=await a.Z.query(s);if(console.log("Query result:",n.rows),n.rows.length>0)return o.NextResponse.json({success:!0,message:"Second-order injection detected!",data:{stored_data:n.rows[0],vulnerability:"Second-order SQL Injection",explanation:"Data was stored safely, but becomes dangerous when retrieved and used in dynamic queries",first_order:e,second_order:s,impact:"Delayed execution makes this harder to detect and trace"}});return o.NextResponse.json({success:!1,message:"No stored data found matching your input",debug_info:{hint:"Try payloads that will be dangerous when retrieved later",second_order_query:s}})}catch(e){return console.error("Database error:",e),o.NextResponse.json({success:!1,error:"Database error in second-order execution",message:e.message,debug_info:{vulnerability:"Second-order SQL injection triggered during data retrieval",hint:"The injection happens when stored data is used in subsequent queries"}},{status:500})}}catch(e){return console.error("Server error:",e),o.NextResponse.json({success:!1,error:"Server error occurred",message:e.message},{status:500})}}a=(n.then?(await n)():n)[0],s()}catch(e){s(e)}})},5748:(e,r,t)=>{t.a(e,async(e,s)=>{try{t.d(r,{Z:()=>i});var o=t(8678),a=e([o]);o=(a.then?(await a)():a)[0],console.log("Database URL:","postgresql://postgres:password@localhost:5432/sqli_lab");let n=new o.Pool({host:"db",port:5432,database:"sqli_lab",user:"postgres",password:"password",ssl:!1,max:20,idleTimeoutMillis:3e4,connectionTimeoutMillis:2e3});n.on("connect",()=>{console.log("Connected to PostgreSQL database")}),n.on("error",e=>{console.error("Unexpected error on idle client",e)});let i=n;s()}catch(e){s(e)}})}};var r=require("../../../webpack-runtime.js");r.C(e);var t=e=>r(r.s=e),s=r.X(0,[276,972],()=>t(6992));module.exports=s})();