(()=>{var e={};e.id=689,e.ids=[689],e.modules={2934:e=>{"use strict";e.exports=require("next/dist/client/components/action-async-storage.external.js")},4580:e=>{"use strict";e.exports=require("next/dist/client/components/request-async-storage.external.js")},5869:e=>{"use strict";e.exports=require("next/dist/client/components/static-generation-async-storage.external.js")},399:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},8131:(e,s,t)=>{"use strict";t.r(s),t.d(s,{GlobalError:()=>n.a,__next_app__:()=>m,originalPathname:()=>u,pages:()=>d,routeModule:()=>x,tree:()=>o}),t(9547),t(2029),t(5866);var r=t(3191),a=t(8716),i=t(7922),n=t.n(i),l=t(5231),c={};for(let e in l)0>["default","tree","pages","GlobalError","originalPathname","__next_app__","routeModule"].indexOf(e)&&(c[e]=()=>l[e]);t.d(s,c);let o=["",{children:["level2",{children:["__PAGE__",{},{page:[()=>Promise.resolve().then(t.bind(t,9547)),"c:\\Users\\YASSER\\Documents\\GitHub\\Lab-Security\\src\\app\\level2\\page.tsx"]}]},{}]},{layout:[()=>Promise.resolve().then(t.bind(t,2029)),"c:\\Users\\YASSER\\Documents\\GitHub\\Lab-Security\\src\\app\\layout.tsx"],"not-found":[()=>Promise.resolve().then(t.t.bind(t,5866,23)),"next/dist/client/components/not-found-error"]}],d=["c:\\Users\\YASSER\\Documents\\GitHub\\Lab-Security\\src\\app\\level2\\page.tsx"],u="/level2/page",m={require:t,loadChunk:()=>Promise.resolve()},x=new r.AppPageRouteModule({definition:{kind:a.x.APP_PAGE,page:"/level2/page",pathname:"/level2",bundlePath:"",filename:"",appPaths:[]},userland:{loaderTree:o}})},1486:(e,s,t)=>{Promise.resolve().then(t.bind(t,8332))},8332:(e,s,t)=>{"use strict";t.r(s),t.d(s,{default:()=>i});var r=t(326),a=t(8530);function i(){let e=async e=>{try{let s=await fetch("/api/level2",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await s.json()}catch(e){return{success:!1,error:"Failed to connect to server"}}};return r.jsx("div",{className:"min-h-screen bg-gradient-to-br from-cyber-dark via-gray-900 to-cyber-dark py-12",children:(0,r.jsxs)("div",{className:"container mx-auto px-6",children:[r.jsx(a.Z,{level:2,title:"Numeric Injection",description:"This level demonstrates SQL injection in numeric contexts where user input is treated as a number rather than a string. The application doesn't use quotes around the user input, making it vulnerable to numeric-based injection attacks.",onSubmit:e,hints:["This level accepts both username and numeric User ID","For valid login: admin/admin123 OR use ID: 1/admin123","User ID is passed as a number without quotes","Try using numeric payloads like: 1 OR 1=1","No quotes are needed for numeric injection","You can use UNION SELECT to extract additional data","Example: Enter '1' as username to use numeric injection"],isVulnerable:!0}),r.jsx("div",{className:"mt-12 max-w-4xl mx-auto",children:(0,r.jsxs)("div",{className:"vulnerability-card rounded-lg p-8",children:[r.jsx("h2",{className:"text-2xl font-semibold mb-6 text-cyber-blue",children:"\uD83D\uDD0D Technical Details"}),(0,r.jsxs)("div",{className:"space-y-6",children:[(0,r.jsxs)("div",{children:[r.jsx("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Vulnerable Code Example:"}),r.jsx("div",{className:"code-block",children:`// Vulnerable numeric SQL query
const query = "SELECT * FROM users WHERE id = " + userId + " AND active = 1";

// When user inputs: 1 OR 1=1
// The query becomes:
// SELECT * FROM users WHERE id = 1 OR 1=1 AND active = 1

// More advanced payload: 1 UNION SELECT username,password,1,1,1 FROM users
// The query becomes:
// SELECT * FROM users WHERE id = 1 UNION SELECT username,password,1,1,1 FROM users AND active = 1`})]}),(0,r.jsxs)("div",{children:[r.jsx("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Key Differences from String Injection:"}),(0,r.jsxs)("ul",{className:"space-y-2 text-gray-300",children:[(0,r.jsxs)("li",{className:"flex items-start",children:[r.jsx("span",{className:"text-cyber-blue mr-2",children:"•"}),"No quotes to escape from"]}),(0,r.jsxs)("li",{className:"flex items-start",children:[r.jsx("span",{className:"text-cyber-blue mr-2",children:"•"}),"Direct numeric manipulation"]}),(0,r.jsxs)("li",{className:"flex items-start",children:[r.jsx("span",{className:"text-cyber-blue mr-2",children:"•"}),"UNION attacks are often more effective"]}),(0,r.jsxs)("li",{className:"flex items-start",children:[r.jsx("span",{className:"text-cyber-blue mr-2",children:"•"}),"Mathematical operations can be used"]})]})]}),(0,r.jsxs)("div",{children:[r.jsx("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Common Payloads:"}),r.jsx("div",{className:"code-block",children:`1 OR 1=1                    # Always true condition
1 OR 1=1--                   # With comment
1 UNION SELECT 1,2,3,4,5     # Union attack
1; DROP TABLE users--        # Destructive attack (if multiple statements enabled)
1 AND (SELECT COUNT(*) FROM information_schema.tables) > 0  # Information gathering`})]}),(0,r.jsxs)("div",{children:[r.jsx("h3",{className:"text-lg font-semibold text-cyber-green mb-3",children:"Prevention:"}),r.jsx("div",{className:"code-block",children:`// Use parameterized queries
const query = "SELECT * FROM users WHERE id = $1 AND active = 1";
const result = await pool.query(query, [parseInt(userId)]);

// Validate input type
if (isNaN(userId) || userId < 1) {
  throw new Error('Invalid user ID');
}`})]})]})]})})]})})}},9547:(e,s,t)=>{"use strict";t.r(s),t.d(s,{default:()=>r});let r=(0,t(8570).createProxy)(String.raw`c:\Users\YASSER\Documents\GitHub\Lab-Security\src\app\level2\page.tsx#default`)}};var s=require("../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[276,471,802],()=>t(8131));module.exports=r})();